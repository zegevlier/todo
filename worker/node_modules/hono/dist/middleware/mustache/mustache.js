"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mustache = void 0;
const mustache_1 = __importDefault(require("mustache"));
const buffer_1 = require("../../utils/buffer");
const cloudflare_1 = require("../../utils/cloudflare");
const EXTENSION = '.mustache';
const DEFAULT_DOCUMENT = 'index.mustache';
const mustache = (init = { root: '' }) => {
    const { root } = init;
    return async (c, next) => {
        c.render = async (filename, params = {}, options) => {
            const path = (0, cloudflare_1.getKVFilePath)({
                filename: `${filename}${EXTENSION}`,
                root: root,
                defaultDocument: DEFAULT_DOCUMENT,
            });
            const kvAssetOptions = {
                manifest: init.manifest,
                namespace: init.namespace ? init.namespace : c.env ? c.env.__STATIC_CONTENT : undefined,
            };
            const buffer = await (0, cloudflare_1.getContentFromKVAsset)(path, kvAssetOptions);
            if (!buffer) {
                throw new Error(`Template "${path}" is not found or blank.`);
            }
            const content = (0, buffer_1.bufferToString)(buffer);
            const partialArgs = {};
            if (options) {
                const partials = options;
                for (const key of Object.keys(partials)) {
                    const partialPath = (0, cloudflare_1.getKVFilePath)({
                        filename: `${partials[key]}${EXTENSION}`,
                        root: root,
                        defaultDocument: DEFAULT_DOCUMENT,
                    });
                    const partialBuffer = await (0, cloudflare_1.getContentFromKVAsset)(partialPath, kvAssetOptions);
                    if (!partialBuffer) {
                        throw new Error(`Partial Template "${partialPath}" is not found or blank.`);
                    }
                    partialArgs[key] = (0, buffer_1.bufferToString)(partialBuffer);
                }
            }
            const output = mustache_1.default.render(content, params, partialArgs);
            return c.html(output);
        };
        await next();
    };
};
exports.mustache = mustache;
