import { GraphQLError } from 'graphql';
import type { GraphQLSchema, ValidationRule, GraphQLFormattedError } from 'graphql';
import type { Context } from '../../context';
import type { Next } from '../../hono';
declare type Options = {
    schema: GraphQLSchema;
    rootValue?: unknown;
    pretty?: boolean;
    validationRules?: ReadonlyArray<ValidationRule>;
};
export declare const graphqlServer: (options: Options) => (c: Context, next: Next) => Promise<Response>;
export interface GraphQLParams {
    query: string | null;
    variables: {
        readonly [name: string]: unknown;
    } | null;
    operationName: string | null;
    raw: boolean;
}
export declare const getGraphQLParams: (request: Request) => Promise<GraphQLParams>;
export declare const errorMessages: (messages: string[], graphqlErrors?: readonly GraphQLError[] | readonly GraphQLFormattedError[] | undefined) => {
    errors: readonly GraphQLError[] | readonly GraphQLFormattedError[];
} | {
    errors: {
        message: string;
    }[];
};
export {};
