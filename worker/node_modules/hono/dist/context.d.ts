/// <reference types="@cloudflare/workers-types" />
import { HonoResponse } from './response';
import type { StatusCode } from './utils/http-status';
declare type Headers = Record<string, string>;
export declare type Data = string | ArrayBuffer | ReadableStream;
export declare type Env = Record<string, any>;
export declare class Context<RequestParamKeyType extends string = string, E = Env> {
    req: Request<RequestParamKeyType>;
    res: Response;
    env: E;
    event: FetchEvent | undefined;
    private _status;
    private _pretty;
    private _prettySpace;
    private _map;
    render: (template: string, params?: object, options?: object) => Promise<Response>;
    notFound: () => Response | Promise<Response>;
    constructor(req: Request<RequestParamKeyType>, opts?: {
        env?: Env;
        event?: FetchEvent;
        res?: Response | HonoResponse;
    });
    private initRequest;
    header(name: string, value: string): void;
    status(status: StatusCode): void;
    set(key: string, value: any): void;
    get(key: string): any;
    pretty(prettyJSON: boolean, space?: number): void;
    newResponse(data: Data | null, init?: ResponseInit): Response;
    body(data: Data | null, status?: StatusCode, headers?: Headers): Response;
    text(text: string, status?: StatusCode, headers?: Headers): Response;
    json(object: object, status?: StatusCode, headers?: Headers): Response;
    html(html: string, status?: StatusCode, headers?: Headers): Response;
    redirect(location: string, status?: StatusCode): Response;
}
export {};
